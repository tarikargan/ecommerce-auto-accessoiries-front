// import { Component, EventEmitter, Input, Output } from '@angular/core';
// import { FormControl, FormGroup, Validators } from '@angular/forms';
// import { map, take } from 'rxjs';
// import { Product } from 'src/app/core/classes/product';
// import { EventTypes } from 'src/app/core/enum/eventTypes';
// import { CommandesService } from 'src/app/core/services/sales-module/commandes/commande.service';


// @Component({
//   selector: 'app-orders-form',
//   templateUrl: './orders-form.component.html',
//   styleUrls: ['./orders-form.component.scss']
// })
// export class OrdersFormComponent {

//   @Input()    order                :any;
//   @Input()    commandeId                :any;
//   @Input()    eventype             :any                  = EventTypes.Add;

//   @Output()   addedOrder           :EventEmitter<any>    = new EventEmitter();
//   @Output()   closeForm            :EventEmitter<any>    = new EventEmitter();
//   @Output()   updatedOrder         :EventEmitter<any>    = new EventEmitter();


//   selectedProduct                  :any;
//   selectedTaille                   :any;
//   selectedColor                    :any;

//   groupedTaille                    :any   = {};
//   tailles                          :any[] = [];
//   defaultQuantity                  :number = 0;
//   restQuantity                     :number = 0;



//   products                         :any = [];
//   etapes                           :any = [];
//   sources                          :any = [];
//   clients                          :any = [];
//   modeLivraisons                   :any = [];
//   offres                           :any = [];

//   editId                           :any;
//   myToolbar                        :any;

//   orderForm!                       :FormGroup;


//   loading                          :boolean              = false;

//   constructor(
//     private  _CommandeService      :CommandesService
//   ) {
//     this.myToolbar = [
//       [{ header: [1, 2, 3, 4, 5, 6, false] }],
//       ['bold', 'italic', 'underline', { direction: 'rtl' }],
//       [{ color: [] }, { background: [] }],
//       [{ 'list': 'ordered'}, { 'list': 'bullet' }],
//       ['blockquote'],
//       ['link'],
//     ];
//   }

//   ngOnInit(): void {
//     this.initForm();
//     this.handleEvent();
//     this.getData();
//   }


//   getData(){
//     this._CommandeService.create()
//     .pipe(take(1))
//     .subscribe(data =>{
//       this.products       = data?.products;
//       this.sources        = data?.sources;
//       this.modeLivraisons = data?.modeLivraisons;
//       this.offres         = data?.offres;
//       this.clients        = data?.clients;
//       if(this.eventype == EventTypes.Add){
//         this.etapes         = data?.etapes.map((e:any)=>({
//           id        : e?.id,
//           title     : e?.title,
//           color     : e?.color,
//           EtapeDate : null
//         }));
//       }
//       console.log(this.etapes);

//     })
//   }

//   initForm(): void {

//     this.orderForm = new FormGroup({
//       commentaire                  : new FormControl('',    []),
//       date_reception               : new FormControl(new Date(),    []),
//       product_id                   : new FormControl('',    []),
//       quantite                     : new FormControl(1,     [Validators.required]),
//       montant                      : new FormControl('',    []),
//       tracking_number              : new FormControl(2,     [Validators.required]),
//       etape_id                     : new FormControl('',    [Validators.required]),
//       client_id                    : new FormControl('',    [Validators.required]),
//       source_id                    : new FormControl('',    [Validators.required]),
//       mode_livraison_id            : new FormControl('',    [Validators.required]),
//       offre_id                     : new FormControl('',    [Validators.required]),
//       quantite_taille_id           : new FormControl('',    [Validators.required]),

//     });

//   }

//   handleEvent(){
//       if(this.eventype == EventTypes.Edit || this.eventype == EventTypes.Duplicate){

//         this._CommandeService.get(this.commandeId)
//         .pipe(take(1), map(el => el?.data))
//         .subscribe((command: any)=>{
//           console.log({command});
//           this.order     = command;
//           this.editId    = command?.id;
//           this.orderForm?.get('ref')?.setValue(command?.ref);
//           this.orderForm?.get('commentaire')?.setValue(command?.commentaire);
//           this.orderForm?.get('date_reception')?.setValue(command?.date_reception);
//           this.orderForm?.get('product_id')?.setValue(command?.product_id);
//           this.orderForm?.get('quantite')?.setValue(command?.quantite);
//           this.orderForm?.get('montant')?.setValue(command?.montant);
//           this.orderForm?.get('tranking_number')?.setValue(command?.tranking_number);
//           this.orderForm?.get('product_id')?.setValue(command?.product?.id);
//           this.orderForm?.get('client_id')?.setValue(command?.client?.id);
//           this.orderForm?.get('etape_id')?.setValue(command?.etape_id);
//           this.orderForm?.get('source_id')?.setValue(command?.source?.id);
//           this.orderForm?.get('mode_livraison_id')?.setValue(command?.modeLivraison?.id);
//           this.orderForm?.get('offre_id')?.setValue(command?.offre?.id);
//           this.orderForm?.get('quantite_taille_id')?.setValue(command?.quantite_taille?.id);
//           this.etapes    = command?.etapes;
//           // this.getActiveEtape();
//           // this.orderForm?.get('etapes')?.setValue(this.etapes);

//           this.selectedProduct = command?.product;
//           this.groupedProductByTaille();
//         })
//       }
//   }

//   get form(){
//     return this.orderForm;
//   }

//   async save(){
//     console.log('value :::', this.orderForm.value);
//     // return;
//     if(this.orderForm.valid){
//       this.loading = true;


//       let data = this.orderForm.value;
//       data = {...data, etapes: this.etapes};

//       console.log({data});

//       this._CommandeService.add(data)
//       .pipe(take(1),map(res => res?.data))
//       .subscribe((res:any)=>{
//         this.loading = false;
//         console.log(res);
//           this.addedOrder.emit(res);
//       },
//       error =>{
//         this.loading = false;
//         console.error(error);
//       })
//     }else{
//       this.orderForm.markAllAsTouched();
//     }
//   }

//   async update(){
//     if(this.orderForm.valid){
//       this.loading = true;
//       let data = this.orderForm.value;
//       data = {...data, etapes: this.etapes};
//       console.log(data);
//       // return;


//       // return ;
//       this._CommandeService.update(this.editId, data)
//       .pipe(take(1),map(res => res?.data))
//       .subscribe((res:any)=>{
//           this.loading = false;
//           this.updatedOrder.emit(res);
//       },
//       error =>{
//         this.loading = false;
//         console.error(error);
//       })
//     }
//   }



//   resetForm(){
//     this.orderForm.reset();
//   }

//   closePopup(){
//     this.closeForm.emit();
//     this.orderForm.reset();
//   }



//   /**
//    * select product
//    * @param product
//    */
//   selectProduct(product:any){
//     console.log("select product", product);
//     this.selectedProduct = product;
//     this.groupedProductByTaille();

//   }


//   /**
//    * grouped product colors by taille
//    */

//   async groupedProductByTaille(){
//      let product       = await this.selectedProduct;
//      console.log('this.selectedProduct::: ',this.selectedProduct);
// //
//      this.calcRestQuantity();

//      if(this.eventype == EventTypes.Add){
//        let price         = await this.selectedProduct?.price;
//        this.orderForm.get('montant')?.setValue(price);
//      }
//      const groupedData = await product?.quantite_taille?.reduce((acc:any, obj:any) => {
//       const key = obj.taille?.name;

//       if (!acc[key]) {
//         acc[key] = [];
//       }

//       acc[key].push(obj);

//       return acc;
//     }, {});


//     let taille = ['xs', 's', 'm', 'l','xl', 'xxl', 'xxxl','Standard'];

//     let orderTaille :any = {};

//     taille.forEach((el, index, array) =>{
//       if(groupedData.hasOwnProperty(el) == true){
//         orderTaille[el] = groupedData[el];
//       }

//       if((array.length - 1) == index){

//         this.groupedTaille = orderTaille;

//         const keys =  Object.keys(this.groupedTaille);
//         this.tailles  = keys;
//         if(this.eventype == EventTypes.Edit){

//           this.selectedTaille = this.order?.quantite_taille?.taille?.name;

//           this.selectedColor = this.order?.quantite_taille?.color;
//         }else{
//           this.selectedTaille = this.tailles[0];
//           this.selectedColor = this.groupedTaille[this.selectedTaille][0].color;
//         }

//         console.log('this.selectedTaille',this.selectedTaille);
//         console.log('this.groupedTaille',this.groupedTaille);

//         this.orderForm.get('quantite_taille_id')?.setValue(this.groupedTaille[this.selectedTaille][0]?.id);
//         console.log(this.groupedTaille, this.tailles);
//       }
//     })
//   }


//   /**
//    * qualculate rest quantity
//    */
//   async calcRestQuantity(){
//     let defaultQuantity = await this.selectedProduct.quantite_taille.reduce( (accumulator:any , quTaille:any  ) => { return accumulator + quTaille.quantite;},0  )
//     this.defaultQuantity = await defaultQuantity;

//     const totalOrderAmount = await this.selectedProduct?.quantite_taille.reduce((acc:any, quTaille:any) => {
//       // Use another reduce for the inner array of orders

//       let productOrderTotal = quTaille?.commandes.length > 0 ? quTaille?.commandes.reduce((orderAcc:any, order:any) => {
//           return orderAcc + order.quantite;
//         }, 0): 0;

//       // Accumulate the total order amount for all users
//       return acc + productOrderTotal;
//     }, 0);

//    this.restQuantity = this.defaultQuantity - totalOrderAmount;
//   }

//   handleChangeTaille(taille:string){
//     let selectedTaille = this.groupedTaille[taille];
//     this.selectedTaille = taille

//     this.selectedColor = selectedTaille[0].color;
//   }


//   /**
//    * color item
//    * @param item
//    */
//   handleChangeColor(item:any){
//     console.log({item});

//     this.orderForm.get('quantite_taille_id')?.setValue(item?.id);

//     this.selectedColor = item?.color;
//   }


//   /**
//    * increment - decrement quantity && calculate total montant
//    * @param operation
//    */
//   rangePrice(operation:any){
//     let price    = this.selectedProduct?.price;

//     let quantite = this.orderForm.get('quantite')?.value;

//     if(operation == 'increment'){
//       this.orderForm.get('quantite')?.setValue(quantite + 1);
//       this.orderForm.get('montant')?.setValue(price * (quantite+1));
//     }else{
//       if (quantite > 1 ) {
//         this.orderForm.get('quantite')?.setValue(quantite - 1);
//         this.orderForm.get('montant')?.setValue(price * (quantite - 1));
//       }
//     }
//   }


//   /**
//    * calculate total montant
//    * @param e
//    */
//   handleChangeQuantity(e:any){
//     let price    = this.selectedProduct?.price;
//     if(e.target.value == ''){
//       this.orderForm.get('quantite')?.setValue(1);
//       this.orderForm.get('montant')?.setValue(price);

//     }else{
//       this.orderForm.get('montant')?.setValue(price * e.target.value);
//     }
//   }


//   handleChangeEtape(etap:any){
//     console.log('check etapes',this.etapes);

//     this.etapes = this.etapes.map((e:any) =>{
//       if(e.id == etap?.id || e?.id < etap?.id && e?.EtapeDate == null) {
//         console.log(e);

//         return {
//           id: e?.id,
//           title: e?.title,
//           color: e?.color,
//           EtapeDate: new Date(),
//         }
//       }else{
//         return e;
//       }
//     });
//   }


//   // getActiveEtape(){
//   //   const activeEtape = this.etapes.reverse().find((etap:any) => etap.EtapeDate !== null);

//   //   if(activeEtape !== undefined && activeEtape !== null){
//   //     this.orderForm.get('etape_id')?.setValue(activeEtape?.id);
//   //     console.log({activeEtape});
//   //   }

//   // }


//   getColor(color:any){
//     switch(color){
//       case 'white':
//         return 'bg-white';
//         break;
//       case 'red':
//         return 'bg-red-500';
//         break;
//       case 'orange':
//         return 'bg-orange-500';
//         break;
//       case 'yellow':
//         return 'bg-yellow-500';
//         break;
//       case 'green':
//         return 'bg-green-500';
//         break;
//       case 'blue':
//         return 'bg-blue-500';
//         break;
//       case 'black':
//         return 'bg-black';
//         break;
//       default:
//         return '';
//     }

//   }


//   capitalizeFirstLetter(text:any) {
//     return text.charAt(0).toUpperCase() + text.slice(1);
//   }




// }
